name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions:
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
          - '1.11'
          - 'pre'
        os:
          - ubuntu-latest
        arch:
          - x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1

      # New step to generate the CSV
      - name: Generate coverage summary
        shell: julia --project --color=yes {0}
        run: |
          using Coverage

          # Collect coverage from .cov files in the src folder
          coverage = process_folder("src")

          # Open a file to write the summary
          open("coverage_summary.csv", "w") do io
              # Write the CSV header
              println(io, "file,covered_lines,total_lines,coverage_percentage")

              # Write data for each file
              for file in coverage
                  summary = get_summary(file)
                  # Skip files with no lines to cover
                  if summary.total_lines > 0
                      filename = file.filename
                      covered = summary.covered_lines
                      total = summary.total_lines
                      percentage = round(100 * covered / total, digits=2)
                      println(io, "$filename,$covered,$total,$percentage")
                  end
              end
          end

          println("Coverage summary saved to coverage_summary.csv")
          cat coverage_summary.csv

      # New step to upload the CSV as an artifact
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-summary-${{ matrix.version }}-${{ matrix.os }}-${{ matrix.arch }}
          path: coverage_summary.csv

      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: write
      statuses: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using MapUnroll
          DocMeta.setdocmeta!(MapUnroll, :DocTestSetup, :(using MapUnroll); recursive=true)
          doctest(MapUnroll)
  runic:
    name: Runic formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: fredrikekre/runic-action@v1
        with:
          version: '1'
